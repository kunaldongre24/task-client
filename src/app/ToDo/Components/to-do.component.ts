import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common'; // Import CommonModule
import { Store, select } from '@ngrx/store';
import { Observable, of, Subscription } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { DatePipe } from '@angular/common';
import * as ToDoActions from '../todo.action';
import ToDo from '../todo.model';
import ToDoState from '../todo.state';
import ToDoHistory from '../todo-history.model';
declare var bootstrap: any;

@Component({
  selector: 'app-to-do',
  templateUrl: './to-do.component.html',
  styleUrls: ['./to-do.component.scss'],
  standalone: true,
  imports: [FormsModule, CommonModule], // Include CommonModule here
  providers: [DatePipe],
})
export class ToDoComponent implements OnInit, OnDestroy {
  constructor(
    private store: Store<{ todos: ToDoState }>,
    private datePipe: DatePipe
  ) {
    this.todo$ = store.pipe(select('todos'));
  }

  ngOnInit() {
    this.ToDoSubscription = this.todo$
      .pipe(
        map((x) => {
          this.ToDoList = x.ToDos;
          this.todoError = x.ToDoError;
        })
      )
      .subscribe();

    this.store.dispatch(ToDoActions.GetToDoAction());
  }

  todo$: Observable<ToDoState>;
  ToDoSubscription: Subscription;
  ToDoList: ToDo[] = [];
  Title: string = '';
  Description: string = '';
  DueDate: Date = new Date();
  Priority: 'low' | 'medium' | 'high' = 'low';
  Status: 'to-do' | 'in-progress' | 'completed' = 'to-do';
  IsCompleted: boolean = false;

  todoError: Error = null;
  selectedTaskId: string = '';
  taskHistory$: Observable<ToDoHistory[]> = new Observable();
  loadingHistory: boolean = false;
  historyError: boolean = false;
  // For editing
  isEditing: boolean = false;
  currentTaskId: string = '';
  sortOption: 'dueDate' | 'priority' | 'status' = 'dueDate'; // Default sorting option

  createToDo() {
    if (this.isEditing) {
      this.updateToDo();
      return;
    }

    const todo: ToDo = {
      _id: '',
      title: this.Title,
      description: this.Description,
      dueDate: this.DueDate,
      priority: this.Priority,
      status: this.Status,
      isCompleted: this.IsCompleted,
      id: '', // Assuming id will be generated by the backend
    };
    this.store.dispatch(ToDoActions.CreateToDoAction({ payload: todo }));
    this.resetForm();
    this.closeModal();
  }

  editToDo(todo: ToDo) {
    this.isEditing = true;
    this.currentTaskId = todo._id;
    this.Title = todo.title;
    this.Description = todo.description;
    this.DueDate = new Date(todo.dueDate);
    this.Priority = todo.priority;
    this.Status = todo.status;
    this.IsCompleted = todo.isCompleted;
    // Open the modal
    const modal = new bootstrap.Modal(document.getElementById('editTaskModal'));
    modal.show();
  }

  updateToDo() {
    const updatedTodo: ToDo = {
      _id: this.currentTaskId,
      title: this.Title,
      description: this.Description,
      dueDate: new Date(this.DueDate),
      priority: this.Priority,
      status: this.Status,
      isCompleted: this.IsCompleted,
      id: this.currentTaskId,
    };
    this.store.dispatch(ToDoActions.UpdateToDoAction({ payload: updatedTodo }));
    this.closeModal();
    this.isEditing = false;
    this.currentTaskId = '';
  }

  deleteToDo(id: string) {
    this.store.dispatch(ToDoActions.DeleteToDoAction({ id }));
  }

  resetForm() {
    this.Title = '';
    this.Description = '';
    this.DueDate = new Date();
    this.Priority = 'low';
    this.Status = 'to-do';
    this.IsCompleted = false;
    this.isEditing = false;
    this.currentTaskId = '';
  }

  showTaskHistory(taskId: string) {
    this.selectedTaskId = taskId;
    this.loadingHistory = true;
    this.historyError = false;
    this.store.dispatch(ToDoActions.GetToDoHistoryAction({ id: taskId }));

    this.taskHistory$ = this.store.pipe(
      select((state) => state.todos.taskHistory),
      map((history) =>
        history.filter((entry) => entry.taskId === this.selectedTaskId)
      ),
      catchError(() => {
        this.loadingHistory = false;
        this.historyError = true;
        return of([]); // Return an empty array on error
      })
    );

    this.taskHistory$.subscribe(() => (this.loadingHistory = false)); // Update loading state after data is loaded

    // Open the modal
    const modal = new bootstrap.Modal(
      document.getElementById('taskHistoryModal')
    );
    modal.show();
  }

  ngOnDestroy() {
    if (this.ToDoSubscription) {
      this.ToDoSubscription.unsubscribe();
    }
  }

  formatDate(date: Date): string {
    return this.datePipe.transform(date, 'shortDate') || '';
  }

  closeModal() {
    const modal = new bootstrap.Modal(document.getElementById('editTaskModal'));
    modal.hide();
  }

  // Example of a sortTasks method in your Angular component
  selectedPriority: string = '';
  selectedStatus: string = '';
  selectedDueDate: string = '';
  sortTasks() {
    // Create a copy of the ToDoList
    const sortedList = [...this.ToDoList];

    // Filter by priority
    if (this.selectedPriority) {
      sortedList.sort((a, b) =>
        a.priority === this.selectedPriority ? -1 : 1
      );
    }

    // Filter by status
    if (this.selectedStatus) {
      sortedList.sort((a, b) => (a.status === this.selectedStatus ? -1 : 1));
    }

    // Sort by due date
    if (this.selectedDueDate) {
      sortedList.sort((a, b) => {
        const dateA = new Date(a.dueDate).getTime();
        const dateB = new Date(b.dueDate).getTime();

        return this.selectedDueDate === 'recent'
          ? dateB - dateA
          : dateA - dateB;
      });
    }

    this.ToDoList = sortedList;
  }
  downloadCSV() {
    const csvRows = [];
    const headers = [
      'Task Name',
      'Description',
      'Priority',
      'Status',
      'Due Date',
    ];
    csvRows.push(headers.join(','));

    this.ToDoList.forEach((task) => {
      const values = [
        task.title,
        task.description,
        task.priority,
        task.status,
        task.dueDate,
      ];
      csvRows.push(values.join(','));
    });

    const csvData = new Blob([csvRows.join('\n')], {
      type: 'text/csv;charset=utf-8;',
    });
    const csvUrl = URL.createObjectURL(csvData);

    // Create a link element and trigger download
    const link = document.createElement('a');
    link.href = csvUrl;
    link.setAttribute('download', 'tasks.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}
